1.2 Dispelling the Database 150 PTS
We've inherited a database that stores information about magic wands.

A MongoDB shell has been started below, so write the command that will set the current database to wandRecorder.

Remember, if you ever forget a command, you can use help.

> use wandRecorder

1.3 Conjuring Collections 150 PTS
The wandRecorder database has wands already loaded inside of a collection named wands. Write a command to find all of the documents in that collection.

> db.wands.find()

1.4 Waving the Wand 150 PTS
We're proud of the shiny new wand we've just purchased, so let's add it to the wands collection. Our wand's name is "Dream Bender" and its creator is "Foxmond".

Write a command to insert our wand into the wands collection.

> db.wands.insert({ "name": "Dream Bender", "creator": "Foxmond"})
WriteResult({ 'nInserted' : 1 })

1.5 Queries and Data Types
Every document needs a unique _id field, if we don't specify one, MongoDB generates one using the ObjectId data type
Can use find to pull multiple documents by field or value, queries are case sensitive 
> db.potions.find({"vendor": "Kettlecooked"}) 

Documents are stored in a format called BSON, similar to JSON
Can store: strings, numbers, booleans, arrays, objects, null, as well as ObjectID, Date
Can store integers and floats
{
    "name": "Invisibility", 
    "vendor": "Kettlecooked", 
    "price": 10.99,
    "score": 59,
    "tryDate": new Date(2012, 8, 13), //(Year, Month, Day) JavaScript starts months count with 0, so this date is September 13, 2012
    "ingredients": ["newt toes", 42, "laughter"],
    "ratings": {"strength": 1, "flavor": 5} //supports embedded documents, doesn't require an id since it is a child of the main doc
    }

BSON converts date to ISO format: ISODate("2012-09-13T04:00:00z")

Array values are treated individually - we can query them by specifying the field of the array and the value we'd like to find.
Search embedded docs by using dot notation:
> db.potions.find({"ratings.flavor": 5})

Validations:
* unique ID
* no syntax errors
* doc size is < 16mb

1.6 Hey, Have You Heard About Wands? 150 PTS
Our friend Merlin was asking about a wand by the name of "Storm Seeker". Let's check the wands collection to see if we can find information about it.

> db.wands.find({"name": "Storm Seeker"})

1.7 Expecto Mongo Wand 150 PTS
Merlin must be losing his marbles, because he actually wanted us to search for any wand created by "Moonsap".

Write a query that finds all wands where the creator is "Moonsap".

> db.wands.find({"creator": "Moonsap"})

1.8 Wand Summonings 250 PTS
There's a lot more about wands than just their name and creator, so let's add a new wand with much more detailed information.

Some wands require more experience than others. Let's record the minimum level needed to use a wand in a field named level_required. This particular wand requires level 10.
We would never think of selling our wand, but it's fun to know how much it's worth anyway. Let's record the price of our wand in a field named price. This particular wand is worth 34.9 gems.
Each wand can have any number of special powers, like Fire, Teleportation, or Energy. Let's record all of these power options in a field named powers. This particular wand has powers of "Fire" and "Love", which should be stored in an array.
Magical folk are a peace-loving people, but occasionally they need to throw down, so it's a good idea to store each wand's damage capability in a field named damage. Most wands can cause 2 types of damage — magic and melee.
The value of the damage field should be an object with 2 properties. The magic property for this wand is 4, and the melee property is 2.
Now that we've built out a wand with all the correct information, go ahead and insert it into the wands collection.


> db.wands.insert({
  "name": "Dream Bender",
  "creator": "Foxmond",
  "level_required": 10,
  "price": 34.9, 
  "powers": ["Fire", "Love"], 
  "damage": {"magic": 4, "melee": 2}
})

1.9 Finding the Perfect Wand 150 PTS
We've upgraded our wands with data for all of the new fields. Now we can write fun queries to find out — for example — which wands have "Fire" in their list of powers. Try writing a query based on this.

> db.wands.find({"powers": "Fire"})

1.10 Bad Magic 250 PTS
You're doing a great job inserting and querying data from the database. Occasionally, though, you may run into some bad data.

Case in point, the following 2 documents are problematic. Can you tell which validation they break?
{
  "_id": ObjectId("1234567"),
  "name": "Dream Bender",
  "creator": "Foxmond",
  "level_required": 10,
  "price": 34.9,
  "powers": ["Fire", "Love"],
  "damage": {"magic": 4, "melee": 2}
},
{
  "_id": ObjectId("1234567"),
  "name": "Lightbane",
  "creator": "Elvira",
  "level_required": 4,
  "price": 4.2,
  "powers": ["Light", "Darkness"],
  "damage": {"magic": 10, "melee": 0}
}

Unique _id
